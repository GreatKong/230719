A good graph with at least two edges has either a vertex of degree 2 or multiple edges.
Find in the graph either two parallel edges or a vertex of degree two, and replace them with one edge. In this case, we will maintain two values (f, p) for each edge: the number of spanning trees and the number of spanning trees without one edge for the subgraph that has shrunk into this edge. At the end, we will have one edge, and the number f for it will be the answer to the problem.
If there are two parallel edges with values (f1, p1) and (f2, p2), then their union (f, p) = (f1 p2 + f2 p1, p1 p2). If there is a vertex of degree two whose edges have the values (f1, p1) and (f2, p2), then for the union (f, p) = (f1 · f2, f1 · p1 + f2 · p2).
To efficiently implement this solution, we will store the edges of each vertex in a map structure that allows you to quickly add and search for edges, and we will also store a queue of vertices of degree two. When adding an edge, if there was already one in the graph, immediately glue the two found parallel edges. Add all vertices of degree two to the queue. You get the next vertex, delete two edges incident to it, and add a new one. We check if the neighbors have a degree of 2.